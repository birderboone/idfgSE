scale_color_manual(values=cols) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1))
ggplot() + geom_sftrack(data = my_sftrack,size=3, alpha = 0.5) +
scale_color_manual(values=cols) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cols <- c('TTP-041_1'= 'dodgerblue1','TTP-041_2'= 'darkseagreen1',
'TTP-058_1' = 'darkorchid1', 'TTP-058_2' = 'darkorchid3')
ggplot() + geom_sftrack(data = my_sftrack,size=3, alpha = 0.5) +
scale_color_manual(values=cols) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cols <- c('TTP-041_1'= 'dodgerblue1','TTP-041_2'= 'darkseagreen2',
'TTP-058_1' = 'darkorchid1', 'TTP-058_2' = 'darkorchid3')
ggplot() + geom_sftrack(data = my_sftrack,size=3, alpha = 0.5) +
scale_color_manual(values=cols) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cols <- c('TTP-041_1'= 'dodgerblue1','TTP-041_2'= 'darkseagreen2',
'TTP-058_1' = 'darkorchid1', 'TTP-058_2' = 'khaki2')
ggplot() + geom_sftrack(data = my_sftrack,size=3, alpha = 0.5) +
scale_color_manual(values=cols) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cols <- c('TTP-041_1'= 'dodgerblue1','TTP-041_2'= 'darkseagreen2',
'TTP-058_1' = 'darkorchid1', 'TTP-058_2' = 'khaki3')
ggplot() + geom_sftrack(data = my_sftrack,size=3, alpha = 0.5) +
scale_color_manual(values=cols) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot() + geom_sftrack(data = my_sftrack,size=3, alpha = 0.5) +
scale_color_manual(values=cols) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle('Raccoons at Tree Tops Park Jan - Feb 2020')
ggplot() + geom_sftrack(data = my_sftrack,size=3, alpha = 0.5) +
scale_color_manual(values=cols) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle('Raccoons at Tree Tops Park Jan 2020')
ggplot() + geom_sftrack(data = my_sftrack,size=3, alpha = 0.5) +
scale_color_manual(values=cols) + theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle('Raccoons at Tree Tops Park Winter 2020')
## run
devtools::load_all("/home/matt/r_programs/sftrack")
devtools::install_local("/home/matt/r_programs/sftrack", force=T)
install.packages("tidyverse")
library(tidyverse)
# Make tracks from raw data
data('raccoon', package = 'sftrack')
#raccoon <- read.csv(system.file('extdata/raccoon_data.csv', package='sftrack'))
raccoon$month <- as.POSIXlt(raccoon$timestamp)$mon+1
raccoon$time <- as.POSIXct(raccoon$timestamp, tz='EST')
coords = c('longitude','latitude')
burst = list(id = raccoon$animal_id, month = as.POSIXlt(raccoon$timestamp)$mon+1)
time = 'time'
error = 'fix'
crs = '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs '
# create a sftrack object
my_sftrack <- as_sftrack(data = raccoon, coords = coords, burst = burst, time = time, error = error, crs = crs)
.data = my_sftrack
sf_column_name = attr(.data, "sf_column")
group_by.sftrack <- function(.data, ..., add = FALSE) {
.data = my_sftrack
dots = list(...)
active_burst(.data) <- dots
}
group_by.sftrack <- function(.data, ..., add = FALSE) {
.data = my_sftrack
dots = list(...)
active_burst(.data) <- dots
structure(.data)
}
my_sftrack %>% group_by(id)
my_sftrack %>% group_by(animal_id)
my_sftrack %>% group_by('animal_id')
group_by.sftrack <- function(.data, ..., add = FALSE) {
.data = my_sftrack
dots = list(...)
active_burst(.data) <- unlist(dots)
structure(.data)
}
my_sftrack %>% group_by(animal_id)
my_sftrack %>% group_by('animal_id')
group_by.sftrack <- function(.data, ..., add = FALSE) {
.data = my_sftrack
dots = list(...)
dots <- sapply(dots, unquo)
active_burst(.data) <- dots
structure(.data)
}
my_sftrack %>% group_by('animal_id')
group_by.sftrack <- function(.data, ..., add = FALSE) {
.data = my_sftrack
dots = list(...)
dots <- sapply(dots, enquo)
active_burst(.data) <- dots
structure(.data)
}
my_sftrack %>% group_by('animal_id')
dots = list('animal_id')
sapply(dots, enquo)
enquo('animal_id')
enquo(animal_id)
quo(animal_id)
dots = list('animal_id')
sapply(dots, enquo)
active_burst(.data) <- unlist(dots)
unlist(dots)
active_burst(.data)
unlist('id')
active_burst(.data) <- unlist('id')
group_by.sftrack <- function(.data, ..., add = FALSE) {
.data = my_sftrack
dots = list(...)
active_burst(.data) <- unlist(dots)
structure(.data)
}
my_sftrack %>% group_by('animal_id')
my_sftrack %>% group_by('id')
my_sftrack %>% group_by('id','month')
burst_names <- function(x){
UseMethod("burst_names", object = x)
}
my_sftrack$burst
x =my_sftrack$burst
levels(attr(x, 'sort_index'))
burst_names.multi_burst <- function(x){
levels(attr(x, 'sort_index'))
}
burst_names.sftraj <- function(x){
levels(attr(x$burst, 'sort_index'))
}
burst_names.sftrack <- function(x){
levels(attr(x$burst, 'sort_index'))
}
burst_names(x)
burst_names(my_sftrack)
enquo(what)
test <- function(key, value){
}
test(what, this)
enquo(key)
enquo(value)
test <- function(key, value){
enquo(key)
enquo(value)
}
test(what, this)
value <- enquo(value)
test <- function(key, value){
key <- enquo(key)
value <- enquo(value)
}
test(what, this)
test <- function(key, value){
key <- enquo(key)
value <- enquo(value)
my_sftrack[,c(key,value)]
}
test(what, this)
test()
test(animal_id)
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- enquo(key)
value <- enquo(value)
my_sftrack[,c(!!key,!!value)]
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- enquo(key)
value <- enquo(value)
my_sftrack %>% select(!!key,!!value)
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- enquo(key)
value <- enquo(value)
as.data.frame(my_sftrack) %>% select(!!key,!!value)
}
test(key = animal_id, value = latitude)
quo(this)
quo(animal_id)
my_sftrack[[quo(animal_id)]]
my_sftrack[[!!quo(animal_id)]]
subset(my_sftrack, select = enquo(animal_id)]]
subset(my_sftrack, select = enquo(animal_id))
subset(my_sftrack, select = !!animal_id)
subset(my_sftrack, select = animal_id)
subset(my_sftrack, select = !!animal_id)
subset(my_sftrack, select = animal_id)
enquo(animal_id)
subset(my_sftrack, select = !!enquo(animal_id))
sym(animal_id)
sym('animal_id')
!!sym('animal_id')
!!!sym('animal_id')
!!sym('animal_id')
as_string(sym('animal_id'))
rlang::as_string(sym('animal_id'))
as_string(animal_id)
rlang::as_string(animal_id)
as_name(animal_id)
rlang::as_name(animal_id)
rlang::ensym(animal_id)
rlang::ensyms(animal_id)
cement <- function(...) {
args <- ensyms(...)
paste(purrr::map(args, as_string), collapse = " ")
}
cement(this)
library(rlang)
cement <- function(...) {
args <- ensyms(...)
paste(purrr::map(args, as_string), collapse = " ")
}
cement(this)
rlang::ensyms(animal_id)
cement <- function(...) {
args <- ensyms(...)
paste(args)
}
cement(this)
cement(this,'sucks')
args
cement <- function(...) {
args <- ensyms(...)
args
}
cement(this,'sucks')
'[.data.frame'
`[.data.frame`
`[.data.frame`(my_sftrack,1,2)
`[.data.frame`(my_sftrack,1)
`[.data.frame`(my_sftrack,1,2)
`[.data.frame`(my_sftrack,1,1)
test <- function(key, value){
key <- enquo(key)
value <- enquo(value)
`[.data.frame`(my_sftrack,1,!!key)
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- ensym(key)
value <- ensym(value)
`[.data.frame`(my_sftrack,1,!!key)
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
`[.data.frame`(my_sftrack,1,!!key)
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
paste(key,value)
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
c(key,value)
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
c(!!key,!!value)
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
quo(key)
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
enquo(key)
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
as_string(key)
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
as_character(key)
}
test(key = animal_id, value = latitude)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
paste(key)
}
test(key = animal_id, value = latitude)
ensyms(key)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
paste(key)
}
test(key = animal_id, value = latitude)
test(animal_id, latitude)
test('animal_id', latitude)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
as_name(key)
}
test('animal_id', latitude)
test(animal_id, latitude)
test <- function(key, value){
key <- sym(key)
value <- ensyms(value)
as_name(key)
}
test(animal_id, latitude)
test <- function(key, value){
key <- ensyms(key)
value <- ensyms(value)
paste(key)
}
test(animal_id, latitude)
group_by.sftrack <- function(.data, ..., add = FALSE) {
#.data = my_sftrack
dots = ensyms(...)
active_burst(.data) <- sapply(dots, paste0)
structure(.data)
}
my_sftrack %>% group_by('id','month')
.data = my_sftrack
dots=list('id')
setdiff(class(data), c("sf",'sftrack'))
class(,data)
class(.data)
.data = my_sftrack
dots=list('id')
class(.data) <- setdiff(class(.data), c("sf",'sftrack'))
dplyr::group_by(.data, !!dots)
raccoon
st_as_sf(raccoon, coords = c('longitude','latitude'))
st_as_sf(raccoon[!is.na(raccoon$latitude),], coords = c('longitude','latitude'))
st_t <- st_as_sf(raccoon[!is.na(raccoon$latitude),], coords = c('longitude','latitude'))
sapply(st_t, class)
group_by(raccoon, animal_id)
group_by(st_t, animal_id)
tt <- group_by(st_t, animal_id)
class(tt)
group_by(my_sftrack, animal_id)
rm(group_by.sftrack)
group_by(my_sftrack, animal_id)
rlang::last_error
rlang::last_error()
tibble:::check_valid_cols(x)
tibble:::check_valid_cols
tibble:::check_valid_cols(my_sftrack)
tibble:::check_valid_cols(as.data.frame(my_sftrack))
x = as.data.frame(my_sftrack)
names_x <- names2(x)
is_xd <- which(!map_lgl(x, is_valid_col))
is_valid_col <- function(x) {
# 657
vec_is(x) || is.expression(x)
}
vec_is
vctrs::vec_is
map_lgl
tibble::is_valid_col
tibble:::is_valid_col
is_xd <- which(!map_lgl(x, tibble:::is_valid_col))
is_xd
x
x$burst
vctrs::vec_is(x$burst)
vctrs::vec_is(x$animal_id)
vctrs::vec_is(x$burst)
vctrs::vec_is
ptype = NUL
ptype = NULL
size = NULL
x = x$burst
!vec_is_vector(x)
!vctrs::vec_is_vector(x)
!vctrs:::vec_is_vector(x)
!vctrs:::vec_is_vector(x)
vctrs:::vec_is_vector(x)
vctrs:::vec_is_vector
vctrs:::vec_is_vector(vector(x))
vctrs:::vec_is_vector(vector(x,'list'))
is.null(x$burst)
is_null <- sapply(x,is.null)
vector("list", length(is_null))
lst <- vector("list", length(is_null))
list[[is_null]]
lst <- vector("list", length(is_null))
lst[[!is_null]]
lst[!is.null]
lst[!is_null]
lst[!is_null] <- x
lst
attributes(lst)
attributes(lst) <- attributes(x)
lst
vctrs::vec_is(x$burst)
vctrs:::vec_is_vector(x)
vctrs:::vec_is_vector(lst)
vctrs:::vec_is_vector
lst <- vector("list", length(is_null))
lst[!is_null] <- list(x)
lst
st_t$geometry
unclass(st_t$geometry)
pp <- unclass(st_t$geometry)
class(pp)
pp[1]
pp[2]
install.packages("kablr")
install.packages("kableExtra")
data.frame(year = c(
"2005 - 2009","2014 - 2016", "2016 - 2017", "2017 - 2019", "2018 - 2020"
),
Job = c(
"University of Texas (BSc Ecology, Evolution, & Behavior)",
"Field work",
"University of Delaware (MSc Wildlife Ecology)",
"Kauai Endangered Seabird Recovery Project",
"Independent Data Consultant",
"University of Florida - Ft. Lauderdale Extension Center
- DB Manager & Analyst"
))
data.frame(year = c(
"2005 - 2009","2009 - 2013","2014 - 2016", "2016 - 2017", "2017 - 2019", "2018 - 2020"
),
Job = c(
"University of Texas (BSc Ecology, Evolution, & Behavior)",
"Field work",
"University of Delaware (MSc Wildlife Ecology)",
"Kauai Endangered Seabird Recovery Project",
"Independent Data Consultant",
"University of Florida - Ft. Lauderdale Extension Center
- DB Manager & Analyst"
))
data.frame(year = c(
"2005 - 2009","2009 - 2013","2014 - 2016", "2016 - 2017", "2017 - 2019", "2018 - 2020"
),
Job = c(
"University of Texas (BSc Ecology, Evolution, & Behavior)",
"Field work",
"University of Delaware (MSc Wildlife Ecology)",
"Kauai Endangered Seabird Recovery Project (DB Manager & Analyst)",
"Independent Data Consultant",
"University of Florida - Ft. Lauderdale Extension Center (DB Manager & Analyst)"
))
here <- data.frame(year = c(
"2005 - 2009","2009 - 2013","2014 - 2016", "2016 - 2017", "2017 - 2019", "2018 - 2020"
),
Job = c(
"University of Texas (BSc Ecology, Evolution, & Behavior)",
"Field work",
"University of Delaware (MSc Wildlife Ecology)",
"Kauai Endangered Seabird Recovery Project (DB Manager & Analyst)",
"Independent Data Consultant",
"University of Florida - Ft. Lauderdale Extension Center (DB Manager & Analyst)"
))
kable(here)
library(knitr)
library(kableExtra)
here <- data.frame(year = c(
"2005 - 2009","2009 - 2013","2014 - 2016", "2016 - 2017", "2017 - 2019", "2018 - 2020"
),
Job = c(
"University of Texas (BSc Ecology, Evolution, & Behavior)",
"Field work",
"University of Delaware (MSc Wildlife Ecology)",
"Kauai Endangered Seabird Recovery Project (DB Manager & Analyst)",
"Independent Data Consultant",
"University of Florida - Ft. Lauderdale Extension Center (DB Manager & Analyst)"
))
kable(here)
kable(here, table.attr = "class=\"striped\"",
format = "html") %>% row_spec(c(1,3), background = "white") %>% row_spec(2,4, background = 'gray')
kable(here, table.attr = "class=\"striped\"",
format = "html") %>% row_spec(c(0,1,3,5), background = "white") %>% row_spec(c(2,4,6), background = 'gray')
arguments(kable)
arguements(kable)
kable(here, table.attr = "class=\"striped\"",
format = "html", ) %>% row_spec(c(0,1,3,5), background = "white") %>% row_spec(c(2,4,6), background = 'lightgray') %>%
kable_styling(latex_options =c("striped", "hold_position"), font_size=10) %>% column_spec(c(1,2), border_left = "2px solid gray", border_right = "2px solid gray", include_thead =T)
kable(here, table.attr = "class=\"striped\"",
format = "html", ) %>% row_spec(c(0,1,3,5), background = "white") %>% row_spec(c(2,4,6), background = 'lightgray') %>%
kable_styling(latex_options =c("striped", "hold_position"), font_size=15) %>% column_spec(c(1,2), border_left = "2px solid gray", border_right = "2px solid gray", include_thead =T)
## CSS color background {data-background=#ff0000}
install_github('ramnathv/slidify',ref="dev")
library(devtools)
install_github('ramnathv/slidify',ref="dev")
install_github('ramnathv/slidifyLibraries',ref="dev")
library(slidify)
setwd('/home/matt/Documents/IDFG_presentation')
author('IDFAG_pres',open_rmd=FALSE)
author('IDFAG_pres')
author('IDFAG_pres')
setwd('/home/matt/Documents/IDFG_presentation')
author('IDFAG_pres')
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
install_github('ramnathv/slidify', force = T)
library(slidify)
setwd('/home/matt/Documents/IDFG_presentation')
author('IDFG_pres')
